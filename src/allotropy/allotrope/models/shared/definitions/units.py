# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
from dataclasses import dataclass

UNITLESS = "(unitless)"


@dataclass(frozen=True)
class HasUnit:
    unit: str


@dataclass(frozen=True)
class Cell(HasUnit):
    unit: str = "cell"


@dataclass(frozen=True)
class Centimeter(HasUnit):
    unit: str = "cm"


@dataclass(frozen=True)
class Counts(HasUnit):
    unit: str = "Counts"


@dataclass(frozen=True)
class CountsPerMilliliter(HasUnit):
    unit: str = "Counts/mL"


@dataclass(frozen=True)
class CountsTimesSecond(HasUnit):
    unit: str = "Counts.s"


@dataclass(frozen=True)
class CubicMillimeter(HasUnit):
    unit: str = "mm^3"


@dataclass(frozen=True)
class DegreeCelsius(HasUnit):
    unit: str = "degC"


@dataclass(frozen=True)
class GramPerLiter(HasUnit):
    unit: str = "g/L"


@dataclass(frozen=True)
class Hertz(HasUnit):
    unit: str = "Hz"


@dataclass(frozen=True)
class MicrogramPerMicroliter(HasUnit):
    unit: str = "ug/uL"


@dataclass(frozen=True)
class MicrogramPerMilliliter(HasUnit):
    unit: str = "ug/mL"


@dataclass(frozen=True)
class Microliter(HasUnit):
    unit: str = "μL"


@dataclass(frozen=True)
class Micrometer(HasUnit):
    unit: str = "μm"


@dataclass(frozen=True)
class MilliAbsorbanceUnit(HasUnit):
    unit: str = "mAU"


@dataclass(frozen=True)
class MilliAbsorbanceUnitTimesMilliliter(HasUnit):
    unit: str = "mAU.mL"


@dataclass(frozen=True)
class MilliAbsorbanceUnitTimesSecond(HasUnit):
    unit: str = "mAU.s"


@dataclass(frozen=True)
class MilliOsmolesPerKilogram(HasUnit):
    unit: str = "mosm/kg"


@dataclass(frozen=True)
class MilliSecond(HasUnit):
    unit: str = "ms"


@dataclass(frozen=True)
class MilligramPerMilliliter(HasUnit):
    unit: str = "mg/mL"


@dataclass(frozen=True)
class Milliliter(HasUnit):
    unit: str = "mL"


@dataclass(frozen=True)
class Millimeter(HasUnit):
    unit: str = "mm"


@dataclass(frozen=True)
class MillimeterOfMercury(HasUnit):
    unit: str = "mmHg"


@dataclass(frozen=True)
class MillimolePerLiter(HasUnit):
    unit: str = "mmol/L"


@dataclass(frozen=True)
class MillionCellsPerMilliliter(HasUnit):
    unit: str = "10^6 cells/mL"


@dataclass(frozen=True)
class Millivolt(HasUnit):
    unit: str = "mV"


@dataclass(frozen=True)
class MillivoltTimesSecond(HasUnit):
    unit: str = "mV.s"


@dataclass(frozen=True)
class NanoCoulomb(HasUnit):
    unit: str = "nC"


@dataclass(frozen=True)
class NanoCoulombTimesSecond(HasUnit):
    unit: str = "nC.s"


@dataclass(frozen=True)
class NanogramPerMicroliter(HasUnit):
    unit: str = "ng/uL"


@dataclass(frozen=True)
class NanogramPerMilliliter(HasUnit):
    unit: str = "ng/mL"


@dataclass(frozen=True)
class Nanometer(HasUnit):
    unit: str = "nm"


@dataclass(frozen=True)
class Number(HasUnit):
    unit: str = "#"


@dataclass(frozen=True)
class NumberPerMicroliter(HasUnit):
    unit: str = "#/μL"


@dataclass(frozen=True)
class OpticalDensity(HasUnit):
    unit: str = "OD"


@dataclass(frozen=True)
class PH(HasUnit):
    unit: str = "pH"


@dataclass(frozen=True)
class Percent(HasUnit):
    unit: str = "%"


@dataclass(frozen=True)
class PicoAmpere(HasUnit):
    unit: str = "pA"


@dataclass(frozen=True)
class PicoAmpereTimesSecond(HasUnit):
    unit: str = "pA.s"


@dataclass(frozen=True)
class PicogramPerMilliliter(HasUnit):
    unit: str = "pg/mL"


@dataclass(frozen=True)
class RelativeFluorescenceUnit(HasUnit):
    unit: str = "RFU"


@dataclass(frozen=True)
class RelativeLightUnit(HasUnit):
    unit: str = "RLU"


@dataclass(frozen=True)
class SecondTime(HasUnit):
    unit: str = "s"


@dataclass(frozen=True)
class SquareCentimetersPerGram(HasUnit):
    unit: str = "cm^2/g"


@dataclass(frozen=True)
class TODO(HasUnit):
    unit: str = "TODO"


@dataclass(frozen=True)
class UnitPerLiter(HasUnit):
    unit: str = "U/L"


@dataclass(frozen=True)
class Unitless(HasUnit):
    unit: str = UNITLESS
