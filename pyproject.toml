[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "allotropy"
dynamic = ["version"]
description = 'Converts to ASM (Allotrope Simple Model) from various file formats.'
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["allotropy", "allotrope", "asm", "benchling", "converters"]
authors = [
  { name = "Benchling Open Source", email = "opensource@benchling.com" },
  { name = "Lukas Boelling", email = "lukas.boelling@deepgenomics.com" },
  { name = "Nick Collins", email = "nick.collins@benchling.com" },
  { name = "Danielle Chou", email = "danielle.chou@benchling.com" },
  { name = "Chris Friedline", email = "chris.friedline@benchling.com" },
  { name = "Kathy Garcia", email = "kathy@benchling.com" },
  { name = "Trevor Halum", email = "trevor.halum@deepgenomics.com" },
  { name = "Joshua Hernandez", email = "jherna@benchling.com" },
  { name = "Sebastian Lopez", email = "sebastian.cardona@benchling.com" },
  { name = "James Leinas", email = "james.leinas@benchling.com" },
  { name = "Mindren Lu", email = "mindren.lu@benchling.com" },
  { name = "Keith Macaulay", email = "keith.macaulay@benchling.com" },
  { name = "Joe Negri", email = "joe.negri@benchling.com" },
  { name = "Preston Olinger", email = "preston.olinger@benchling.com" },
  { name = "Alejando Salgado", email = "alejando.salgado@benchling.com" },
  { name = "Nathan Stender", email = "nathan.stender@benchling.com" },
  { name = "Eihab Syed", email = "eihabsyed@gmail.com" },
  { name = "Yukthi Wickramarachchi", email = "yukthi.wickramarachchi@deepgenomics.com" },
  { name = "Greg Wilson", email = "gvwilson@third-bit.com" },
  { name = "Ben Wolfe", email = "bwolfe@benchling.com" },
  { name = "Stephen Worlow", email = "stephen.worlow@benchling.com" },
  { name = "Brian Worth", email = "brian@benchling.com" },
  { name = "Alex Reis", email = "alex@manifold.bio" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dependencies = [
  "cattrs == 23.1.2",
  "chardet >= 5.2.0",
  # NOTE: jsonschema 4.18.0 introduces a serious performance regression, seemingly due to use of new
  # referencing library.
  # Filed issue: https://github.com/python-jsonschema/referencing/issues/178
  # TODO(nstender): investigate removing all refs from schema before use to work around perf issues
  # while unblocking package upgrades.
  "jsonschema >= 4.3.3, < 4.18.0",
  "numpy >= 1.25.0",
  "openpyxl >= 3.1.0",
  "pandas >= 2.2.0",
  "python-calamine >= 0.2.3",
  "xlrd >= 2.0.0",
  "rfc3339-validator >= 0.1.4",
]

[project.urls]
Documentation = "https://github.com/Benchling-Open-Source/allotropy#readme"
Issues = "https://github.com/Benchling-Open-Source/allotropy/issues"
Source = "https://github.com/Benchling-Open-Source/allotropy"

[tool.black]
target-version = ["py310"]
skip-string-normalization = true

[tool.coverage.run]
source_pkgs = ["allotropy"]
branch = true
parallel = true
omit = [
  "src/allotropy/allotrope/models/*",
  "__init__.py",
  "__about__.py",
]

[tool.coverage.paths]
allotropy = ["src/allotropy", "*/allotropy/src/allotropy"]
tests = ["tests", "*/allotropy/tests"]

[tool.coverage.report]
exclude_lines = [
  "if TYPE_CHECKING:",
]

[tool.hatch.build.targets.sdist]
exclude = [
  "/docs",
  "/tests",
  "/.github",
  "/.vscode",
  "/.idea",
]

[tool.hatch.build.targets.wheel]
packages = ["src/allotropy"]

[tool.hatch.version]
path = "src/allotropy/__about__.py"

[tool.hatch.envs.default]
# Pin default enviroment to 3.11. We aim to support 3.10+, but for fast testing, the default test command runs
# 3.11. Use hatch run test_all to tests against 3.10-3.12
# Note: if your hatch env is not picking up this setting, run hatch env prune.
python = "3.11.9"
# We define dependencies for linting and datamodel codegen in the default environment because we lint in
# the generation script, and we test generation in tests, so we need them everywhere except the actual project.
dependencies = [
  "autoflake == 2.2.0",
  # black pinned for compatability with datamodel-code-generator
  "black == 22.3.0",
  "datamodel-code-generator == 0.25.2",
  # Without jsonschema-spec and pydantic, pydantic spews a bunch of errors when parsing schemas
  "jsonschema-specifications == 2023.7.1",
  "pydantic == 1.10.17",
  "ruff == 0.0.289",
  "semantic-version",
]

[tool.hatch.envs.default.scripts]
fix = "hatch run lint:fmt {args:}"
lint = "hatch run lint:all {args:}"
test = "hatch run test:test {args:}"

[tool.hatch.envs.viz]
extra-dependencies = [
    "networkx >= 3.2.1",
    "pygraphviz >= 1.11",
]

[tool.hatch.envs.scripts]
platforms = ["linux", "macos"]

[tool.hatch.envs.scripts.scripts]
script_path = "scripts/"
generate-schemas = "scripts/generate_schemas.py {args:}"
download-schema = "scripts/download_schema.py {args:}"
create-parser = "scripts/create_parser.py {args:}"
update-instrument-table = "scripts/update_supported_instruments_table.py {args:}"
update-version = "scripts/update_version.py {args:}"

[tool.hatch.envs.win-scripts]
platforms = ["windows"]

[tool.hatch.envs.win-scripts.scripts]
generate-schemas = "python scripts\\generate_schemas.py {args:}"
download-schema = "python scripts\\download_schema.py {args:}"
create-parser = "python scripts\\create_parser.py {args:}"
update-instrument-table = "scripts\\update_supported_instruments_table.py {args:}"
update-version = "python scripts\\update_version.py {args:}"

[tool.hatch.envs.viz.scripts]
run = "scripts/visualization.py {args:}"

[tool.hatch.envs.lint]
extra-dependencies = [
  # mypy sometimes can't find cattrs even though it's a project dependency, so add explicitly here.
  "cattrs == 23.1.2",
  "more-itertools >= 10.1.0",
  "mypy == 1.8.0",
  "pandas-stubs == 2.1.4.231227",
  "olefile >= 0.47",
  "types-olefile",
  # For pytest types
  "pytest >= 7.4.0",
  # For check graph generation
  "networkx-stubs",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/allotropy scripts tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

# Running hatch run test_all:test will run tests against all python verisons specified here.
[tool.hatch.envs.test_all]
template = "test"

[[tool.hatch.envs.test_all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.test]
extra-dependencies = [
  "coverage[toml] >= 6.5",
  "deepdiff >= 6.5.0",
  "more-itertools >= 10.1.0",
  "pytest >= 7.4.0",
  "pytest-xdist >= 3.6.1",
  "xmltodict >= 0.13.0",
  "olefile >= 0.47",
  "pyarrow >= 17.0.0",
  "fastparquet >= 2024.5.0",
  "types-olefile"
]

[tool.hatch.envs.test.scripts]
test = "pytest -n auto {args:tests}"
short = "pytest -m 'not long' {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
  "coverage xml"
]
cov = [
  "test-cov",
  "cov-report",
]

[tool.pytest.ini_options]
pythonpath = "src"
markers = [
  "long: mark a test that takes a long time to run",
]

[tool.ruff]
target-version = "py310"
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Ignore line length, black does it better and actually fixes it.
  "E501",
]

[tool.ruff.isort]
known-first-party = ["allotropy"]
combine-as-imports = true
force-sort-within-sections = true
order-by-type = false

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values and assertions
"tests/**/*" = ["PLR2004", "S101"]
"src/allotropy/allotrope/models/**/*.py" = [
  # Allow mixedCase variables
  "N815",
]
# Generated models can have class fields that shadow python builtins
"src/allotropy/allotrope/models/**/*" = ["A003"]
# Scripts can print
"scripts/**/*" = ["T201"]
# update_version can use subprocess
"scripts/update_version.py" = ["S603", "S607"]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
